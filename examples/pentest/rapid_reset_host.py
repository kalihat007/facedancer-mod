#!/usr/bin/env python3
"""Stress a target USB device by rapidly resetting and re-enumerating it."""

import argparse
import logging
import time

from facedancer import FacedancerUSBHostApp


def run_cycles(cycles: int, delay: float, settle: float):
    host = FacedancerUSBHostApp(verbose=1)

    logging.info("Ensuring VBUS is asserted")
    host.connect()

    for cycle in range(1, cycles + 1):
        logging.info("Cycle %d/%d: issuing bus reset", cycle, cycles)
        host.bus_reset(delay=delay)
        time.sleep(settle)

        logging.debug("Port state: connected=%s enabled=%s line=%s",
                      host.device_is_connected(),
                      host.port_is_enabled(),
                      host.current_line_state(as_string=True))


def main_cli():
    parser = argparse.ArgumentParser(description="GreatFET host reset storm generator")
    parser.add_argument("--cycles", type=int, default=100,
                        help="Number of reset cycles to perform (default 100)")
    parser.add_argument("--reset-delay", type=float, default=0.1,
                        help="Seconds to hold the reset signalling (default 0.1)")
    parser.add_argument("--settle", type=float, default=0.05,
                        help="Delay after each reset before the next cycle (default 50ms)")
    parser.add_argument("--log", default="INFO", help="Logging level (default INFO)")

    args = parser.parse_args()
    logging.basicConfig(level=getattr(logging, args.log.upper(), logging.INFO),
                        format="[%(levelname)s] %(message)s")

    run_cycles(args.cycles, args.reset_delay, args.settle)


if __name__ == "__main__":
    main_cli()
