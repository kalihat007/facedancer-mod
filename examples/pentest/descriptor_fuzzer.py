#!/usr/bin/env python3
"""Enumerate repeatedly while mutating USB descriptors to stress host parsers."""

import argparse
import logging
import random
import sys

from facedancer import main
from facedancer.future import *
from facedancer.future.types import DescriptorTypes
from facedancer.future.request import USBControlRequest


class DescriptorFuzzDevice(USBDevice):
    """USB device that returns randomized descriptors on every enumeration."""

    name: str = "Descriptor Fuzz Device"

    def __init__(self, *, rng: random.Random, max_descriptor: int, **kwargs):
        self._rng = rng
        self._max_descriptor = max_descriptor
        self._iteration = 0
        super().__init__(**kwargs)

    def __post_init__(self):
        super().__post_init__()
        self._prepare_new_descriptors()

    def _random_bytes(self, length: int) -> bytes:
        return bytes(self._rng.getrandbits(8) for _ in range(length))

    def _prepare_new_descriptors(self):
        self._iteration += 1

        # Device descriptor must be at least 18 bytes, but we intentionally
        # allow oversized results to fuzz length handling.
        device_len = self._rng.randint(18, self._max_descriptor)
        config_len = self._rng.randint(9, self._max_descriptor)
        qualifier_len = self._rng.randint(10, 64)

        self._device_descriptor = self._random_bytes(device_len)
        self._config_descriptor = self._random_bytes(config_len)
        self._qualifier_descriptor = self._random_bytes(qualifier_len)

        # Generate a collection of random string descriptors. Index 0 must be
        # UTF16 language IDs, so we keep it somewhat spec-compliant.
        self._strings = {
            0: b"\x04\x03\x09\x04"
        }

        for index in range(1, 6):
            raw = self._random_bytes(self._rng.randint(2, self._max_descriptor // 2))
            length = min(len(raw) + 2, self._max_descriptor)
            descriptor = bytes([length, DescriptorTypes.STRING]) + raw[:length - 2]
            self._strings[index] = descriptor

        logging.info("Prepared fuzz iteration %d: device=%dB config=%dB",
                     self._iteration, len(self._device_descriptor), len(self._config_descriptor))

    @standard_request_handler(number=USBStandardRequests.GET_DESCRIPTOR)
    @to_device
    def handle_get_descriptor_request(self, request: USBControlRequest):
        descriptor_type = request.value >> 8
        index = request.value & 0xFF

        if descriptor_type == DescriptorTypes.DEVICE:
            data = self._device_descriptor
        elif descriptor_type == DescriptorTypes.CONFIGURATION:
            data = self._config_descriptor
        elif descriptor_type == DescriptorTypes.STRING:
            data = self._strings.get(index)
            if data is None:
                data = self._random_bytes(self._rng.randint(2, self._max_descriptor))
                data = bytes([len(data) + 2, DescriptorTypes.STRING]) + data
        elif descriptor_type == DescriptorTypes.DEVICE_QUALIFIER:
            data = self._qualifier_descriptor
        else:
            data = self._random_bytes(self._rng.randint(2, self._max_descriptor))

        logging.debug("GET_DESCRIPTOR type=0x%02x index=%d len=%d", descriptor_type, index, request.length)
        request.reply(data)

    @standard_request_handler(number=USBStandardRequests.SET_CONFIGURATION)
    @to_device
    def handle_set_configuration_request(self, request: USBControlRequest):
        super().handle_set_configuration_request(request)

        # Once the host configures the device we prep the next set of descriptors
        # so that the following re-enumeration gets fresh data.
        self._prepare_new_descriptors()


def main_cli():
    parser = argparse.ArgumentParser(description="USB descriptor fuzzer using FaceDancer")
    parser.add_argument("--seed", type=int, default=None, help="RNG seed for reproducibility")
    parser.add_argument("--max-length", type=int, default=512,
                        help="Maximum descriptor size to generate (default 512)")
    parser.add_argument("--log", default="INFO", help="Logging level (default INFO)")

    args, remaining = parser.parse_known_args()
    sys.argv = [sys.argv[0], *remaining]
    logging.basicConfig(level=getattr(logging, args.log.upper(), logging.INFO),
                        format="[%(levelname)s] %(message)s")

    rng = random.Random(args.seed)

    device = DescriptorFuzzDevice(rng=rng, max_descriptor=args.max_length,
                                  vendor_id=rng.randint(0, 0xFFFF),
                                  product_id=rng.randint(0, 0xFFFF))

    main(device)


if __name__ == "__main__":
    main_cli()
