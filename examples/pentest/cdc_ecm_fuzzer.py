#!/usr/bin/env python3
"""MITM a CDC/ECM device and mutate Ethernet frames on the fly."""

import argparse
import logging
import os
import random

from facedancer import FacedancerUSBApp
from facedancer.USBProxy import USBProxyDevice, USBProxyFilter
from facedancer.filters.standard import USBProxySetupFilters


class ECMFuzzFilter(USBProxyFilter):
    """Randomly corrupts CDC-ECM bulk traffic to fuzz host/device stacks."""

    def __init__(self, *, flip_chance: float, truncate_chance: float, pad_chance: float):
        super().__init__()
        self.flip_chance = flip_chance
        self.truncate_chance = truncate_chance
        self.pad_chance = pad_chance
        self.rng = random.SystemRandom()

    def _mutate(self, data: bytearray) -> bytes:
        if not data:
            return bytes(data)

        # Random bit flips.
        if self.rng.random() < self.flip_chance:
            index = self.rng.randrange(len(data))
            bit = 1 << self.rng.randrange(8)
            data[index] ^= bit

        # Truncate frame.
        if self.rng.random() < self.truncate_chance and len(data) > 4:
            cut = self.rng.randrange(1, len(data))
            data = data[:cut]

        # Add random padding.
        if self.rng.random() < self.pad_chance:
            pad_len = self.rng.randrange(1, 32)
            data.extend(os.urandom(pad_len))

        return bytes(data)

    def filter_in(self, endpoint: int, data: bytes):
        return endpoint, self._mutate(bytearray(data))

    def filter_out(self, endpoint: int, data: bytes):
        return endpoint, self._mutate(bytearray(data))


def main_cli():
    parser = argparse.ArgumentParser(description="CDC/ECM ethernet frame fuzzer using FaceDancer proxy")
    parser.add_argument("--vid", type=lambda value: int(value, 16), required=True,
                        help="Vendor ID of the CDC device (hex)")
    parser.add_argument("--pid", type=lambda value: int(value, 16), required=True,
                        help="Product ID of the CDC device (hex)")
    parser.add_argument("--flip", type=float, default=0.2,
                        help="Probability of flipping a random bit (default 0.2)")
    parser.add_argument("--truncate", type=float, default=0.1,
                        help="Probability of truncating frames (default 0.1)")
    parser.add_argument("--pad", type=float, default=0.1,
                        help="Probability of appending random padding (default 0.1)")
    parser.add_argument("--log", default="INFO", help="Logging level (default INFO)")

    args = parser.parse_args()
    logging.basicConfig(level=getattr(logging, args.log.upper(), logging.INFO),
                        format="[%(levelname)s] %(message)s")

    app = FacedancerUSBApp(verbose=1)
    proxy = USBProxyDevice(app, idVendor=args.vid, idProduct=args.pid, verbose=2)

    proxy.add_filter(USBProxySetupFilters(proxy, verbose=2))
    proxy.add_filter(ECMFuzzFilter(flip_chance=args.flip,
                                   truncate_chance=args.truncate,
                                   pad_chance=args.pad))

    proxy.connect()

    try:
        proxy.run()
    except KeyboardInterrupt:
        proxy.disconnect()


if __name__ == "__main__":
    main_cli()
