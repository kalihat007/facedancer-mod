#!/usr/bin/env python3
"""Expose an isochronous audio interface that streams malformed data."""

import argparse
import logging
import os
import random

from facedancer import main
from facedancer.future import *


@use_inner_classes_automatically
class AudioIsoFuzzDevice(USBDevice):
    name: str = "Audio Iso Fuzzer"
    product_string: str = "AudioFuzz"
    device_class: int = 0x00

    def __init__(self, *, packet_size: int, **kwargs):
        self._packet_size = packet_size
        super().__init__(**kwargs)

    class AudioConfiguration(USBConfiguration):
        configuration_number: int = 1
        configuration_string: str = "Audio fuzz"

        class ControlInterface(USBInterface):
            number: int = 0
            class_number: int = 0x01  # Audio class
            subclass_number: int = 0x01
            protocol_number: int = 0x00

            class ACDescriptor(USBDescriptor):
                type_number: int = 0x24
                
                def __init__(self, **kwargs):
                    super().__init__(number=0, raw=b"\x09\x24\x01\x00\x01\x28\x00\x01\x01", **kwargs)

        class StreamingInterface(USBInterface):
            number: int = 1
            class_number: int = 0x01
            subclass_number: int = 0x02  # Audio streaming
            alternate_setting: int = 1

            class IsoEndpoint(USBEndpoint):
                number: int = 1
                direction: USBDirection = USBDirection.IN
                transfer_type: USBTransferType = USBTransferType.ISOCHRONOUS
                synchronization_type: USBSynchronizationType = USBSynchronizationType.ASYNC
                usage_type: USBUsageType = USBUsageType.DATA
                interval: int = 1

                def handle_data_requested(self):
                    parent = self.get_device()
                    size = parent._packet_size
                    payload = os.urandom(size)
                    # Intentionally vary length to hit parser edges.
                    trim = max(1, parent._packet_size // 4)
                    payload = payload[:max(1, size - parent._rng.randrange(trim))]
                    self.send(payload)

        interfaces = (ControlInterface, StreamingInterface)

    def __post_init__(self):
        self._rng = random.SystemRandom()
        super().__post_init__()


def main_cli():
    parser = argparse.ArgumentParser(description="Isochronous audio endpoint fuzzer")
    parser.add_argument("--packet-size", type=int, default=192,
                        help="Maximum isochronous packet size (default 192)")
    parser.add_argument("--log", default="INFO", help="Logging level")

    args = parser.parse_args()
    logging.basicConfig(level=getattr(logging, args.log.upper(), logging.INFO),
                        format="[%(levelname)s] %(message)s")

    device = AudioIsoFuzzDevice(packet_size=args.packet_size)
    main(device)


if __name__ == "__main__":
    main_cli()
