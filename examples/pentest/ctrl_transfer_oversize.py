#!/usr/bin/env python3
"""Respond to control transfers with intentionally oversized payloads."""

import argparse
import asyncio
import logging
import os

from facedancer import main
from facedancer.future import *
from facedancer.future.request import USBControlRequest


class ControlFloodDevice(USBDevice):
    name: str = "EP0 Flood"

    def __init__(self, *, max_payload: int, **kwargs):
        self._max_payload = max_payload
        super().__init__(**kwargs)

    def _oversized_blob(self, minimum: int = 64) -> bytes:
        length = max(minimum, self._max_payload)
        pattern = os.urandom(length)
        return pattern

    @standard_request_handler(number=USBStandardRequests.GET_DESCRIPTOR)
    @to_device
    def handle_get_descriptor_request(self, request: USBControlRequest):
        # Generate a payload much larger than the host requested.
        blob = self._oversized_blob()
        logging.debug("GET_DESCRIPTOR wLength=%d, responding with %d bytes", request.length, len(blob))
        request.reply(blob)

    @standard_request_handler(number=USBStandardRequests.GET_STATUS)
    @to_device
    def handle_get_status_request(self, request: USBControlRequest):
        request.reply(self._oversized_blob(minimum=8))

    @standard_request_handler(number=USBStandardRequests.GET_CONFIGURATION)
    @to_device
    def handle_get_configuration_request(self, request: USBControlRequest):
        request.reply(self._oversized_blob(minimum=32))

    @standard_request_handler(number=USBStandardRequests.SET_CONFIGURATION)
    @to_device
    def handle_set_configuration_request(self, request: USBControlRequest):
        # Acknowledge normally, then immediately spray additional IN data on EP0.
        super().handle_set_configuration_request(request)
        logging.info("Spraying post-config oversized data (%d bytes)", self._max_payload)
        self.send(endpoint_number=0, data=self._oversized_blob())


async def pump_extra_transfers(device: ControlFloodDevice, interval: float):
    """Continuously leak extra data on EP0 to test host robustness."""
    while True:
        await asyncio.sleep(interval)
        device.send(endpoint_number=0, data=device._oversized_blob())


def main_cli():
    parser = argparse.ArgumentParser(description="USB control transfer oversize responder")
    parser.add_argument("--max-payload", type=int, default=4096,
                        help="Maximum EP0 payload to transmit (default 4096 bytes)")
    parser.add_argument("--spray-interval", type=float, default=1.0,
                        help="Seconds between unsolicited EP0 payloads (default 1s)")
    parser.add_argument("--log", default="INFO", help="Logging level (default INFO)")

    args = parser.parse_args()
    logging.basicConfig(level=getattr(logging, args.log.upper(), logging.INFO),
                        format="[%(levelname)s] %(message)s")

    device = ControlFloodDevice(max_payload=args.max_payload)
    coroutine = pump_extra_transfers(device, args.spray_interval)

    main(device, coroutine)


if __name__ == "__main__":
    main_cli()
